git init  初始化仓库
git config --global user.name "your Name" 设置用户名 和邮箱
git config --global user.email "xxx@xx.com"
git add 文件名  文本格式 
git commit -m “注释”
git status  查看仓库状态
git diff 文件名 查看修改的差异
git log  查看历史记录 --pretty=oneline 参数 减少信息输出
git reset --hard HEAD^ 表示回到上次修改. HEAD~100 撤回100次
git reset --hard commit id 回到指定的id
git reflog 历史命令
git diff HEAD -- 文件名  查看工作区和版本库里面的区别

	git add 将工作区的内容加入到stage(index)暂存区
	git commit 将暂存区的内容加入到master分支中
git checkout -- 文件名 用版本库里的版本替换工作区的版本
git reset HEAD 文件名 丢弃暂存区的修改重新放到工作区
git rm 文件名 从版本库中删除文件 并git commit 提交
ssh-keygen -t rsa -C "你的邮箱地址"如xxx.qq@.com 之后一直按回车
 然后在当前用户主目录里面找到.ssh目录 里面有id_rsa私钥和id_rsa.pub公钥
git remote add origin git@github.com:'你的GitHub账户名'/'GitHub的仓库名'.git实际输入没有单引号 origin是远程库的默认名
git push -u origin master 把本地库的所有内容推送到远程库 -u表示将本地分支和远程分支关联起来
  从现在起，只要本地做了提交就可以通过以下命令
git push origin master 将本地master分支推送至GitHub。
现在你就有了真正的分布式版本库。

git remote -v 查看远程库信息
git remote rm origin 删除远程库的绑定关系
    关联一个远程库:
git remote add origin git@server-name:path/repo-name.git

git clone git@github.com:'github账户名'/'远程库名'.git 
 克隆一个GitHu远程库到本地 在GitHub上的code中有ssh和https的方法

git checkout -b 分支名 创建一个新的分支并切换到新的分支
git branch 分支名  创建一个分支
git checkout 分支名  选择使用当前分支
git branch 查看当前分支和所有分支 *当前分支
git merge 分支名 合并指定分支到当前分支
git branch -d 分支名 删除当前分支
git switch -c 分支名  创建并使用一个新的分支
git switch 分支名 切换到当前选择的分支
